1. 푸는 시간 	:	1시간
2. 디버깅  시간 	:	3시간 15분
3. 배운 점
	1) 문제
	- 1초 단위로 모든 상어들을 동시에 이동시켜야함
	
	2-1) 오류가 발생한 풀이
	- for문을 돌면서 순차적으로 상어의 상태를 업데이트하였음.
	- 상어의 새로운 이동장소의 위치를 x, y 라고할 때,
	- time[y][x] = K + 1 대입하였음.
	- 다음 index 상어는 이동하고자 하는 위치의 time 값이 K + 1 이면 이동할 수 있다고 판단
	>>>> 오류 발생
		- 이전 index 상어가 이미 자신의 냄새가 있는 곳으로 이동하고자 할때, 해당 장소의 time 값에 K + 1 대입
		- 다음 index 상어가 상기 위치를 이동할 수 있는지 검사하면, 이동 가능하다고 판단
			
	2-2) 오류 수정한 풀이
	- for문 안에서 상어의 상태를 곧바로 업데이트하지 않아야 함
	- 다음 index 상어가 영향을 받을 수 있기 때문
	- 업데이트 표시만 해두고,,,
	- for문 종료 후, 한꺼번에 상태를 업데이트

	3-1) 오류가 발생한 풀이
	- 2번 상어가 죽으면 게임이 끝난다고 판단
	>>>> 오류 발생
		- 1번이 2번을 죽이나, 3번은 살아있는 경우가 존재

	3-2) 오류 수정한 풀이
	- 모든 상어가 죽어야 게임이 끝난다고 판단
	- *** 논리 오류 ***
	- 여러번 생각하자!!!

	4-1) 오류가 발생한 풀이
	- 1000초 넘을 때 반복문이 종료
	- while(to++ <= 1000){ 동작 }
	- to의 범위가 0~1000 이므로, while문의 동작은 1001번 수행
	- to의 값이 1001이 될 수 있으며, 오류가 발생
	>>>> 오류 발생

	4-2) 오류 수정한 풀이
	- while(to++ < 1000){ 동작 }

	4) 배운 점
	- 시간 단위 (예:1초) 마다, 시뮬레이션을 할 때, 객체 상호 간에 영향을 받으면 안된다면, 한꺼번에 상태를 업데이트하도록 하자
	- 시간과 관련된 조건은 반드시 10번 생각하자.
	- 전역변수를 초기화하지 않을 경우, default 값으로 자동 초기화
	- 지역변수를 초기화하지 않을 경우, 쓰레기 값
	예) bool flag 지역변수로 초기화시, true임. 전역변수로 초기화시, false임